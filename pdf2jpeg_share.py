# -*- coding: utf-8 -*-
"""PDF2JPEG_Share.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1udlSEnyTPDOjm37YCJYmu5uAPsN9Xwx9
"""

!pip install pypdfium2
!pip install tqdm

from time import sleep
from tqdm import tqdm, trange

import os
import matplotlib.pyplot as plt
import numpy as np
import zipfile
import pypdfium2 as pdfium
from google.colab import files

def tarFolderPath(fileName):
    return os.path.join(os.getcwd(), f'{fileName}轉JPG')

def transKernal(fileName):
    pdfName = f'{fileName}.pdf'
    folderPath = tarFolderPath(fileName)
    if not os.path.isdir(folderPath):
        os.mkdir(folderPath)
    pdf = pdfium.PdfDocument(pdfName)
    n_pages = len(pdf)
    page_indices = [i for i in range(n_pages)]  # all pages
    renderer = pdf.render(
        pdfium.PdfBitmap.to_pil,
        page_indices = page_indices,
        scale = 300/72,# 300dpi resolution
        crop=(0, 0, 0, 0),
    )
    n_digits = len(str(n_pages))
    return (page_indices, n_digits, renderer)

def saveKernal(fileName, n_digits, page_indices, renderer, *args):
    os.chdir(tarFolderPath(fileName))
    saveName = f'{fileName}_{{pageNum:0{n_digits}d}}.jpg'

    print('PDF準備轉JPG檔.')
    for i, image in tqdm(zip(page_indices, renderer)):
        pageNum = i+1
        # print(args)
        if len(args) == 0:
            # print('type 1')
            image.save(saveName.format(pageNum = pageNum))
        elif isinstance(args[0], tuple) and (pageNum in args[0]):
            # print('type 2')
            image.save(saveName.format(pageNum = pageNum))
        elif isinstance(args[0], list) and (pageNum in args[0]):
            # print('type 3')
            image.save(saveName.format(pageNum = pageNum))
    print('轉檔完成.')
    os.chdir('/content')

def zipKernal(fileName):
    folderPath = tarFolderPath(fileName)
    os.chdir(folderPath)

    print('壓縮打包中.')
    with zipfile.ZipFile(f'{folderPath}.zip', mode='w') as zf:
        for jpgName in os.listdir(folderPath):
            zf.write(os.path.join(folderPath, jpgName))
    print('壓縮檔案完成, 開始下載.')
    files.download(f'{folderPath}.zip')
    os.chdir('/content')

def PDF2JPG(fileName = ''):
    page_indices, n_digits, renderer = transKernal(fileName)
    saveKernal(fileName, n_digits, page_indices, renderer)
    zipKernal(fileName)

def PDF2JPG_2(fileName = '', *args):
    page_indices, n_digits, renderer = transKernal(fileName)
    saveKernal(fileName, n_digits, page_indices, renderer, args)
    zipKernal(fileName)

def getContiRange(item, page_indices):
    # print(item)
    if '-' in item:
        # print('is range')
        rangeType = item.split('-')
        startInd = int(rangeType[0])
        endInd = page_indices[-1] +1
        if item[-1] != '-':
            endInd = int(rangeType[1])

        return list(range(startInd, endInd+1))
    else:
        # print('is not range')
        return [int(item)]

def PDF2JPG_3(fileName = '', pageRange=''):
    page_indices, n_digits, renderer = transKernal(fileName)

    pageRange = pageRange.replace(' ', '').split(',')
    totalRange = []
    for item in pageRange:
        totalRange += getContiRange(item, page_indices)

    saveKernal(fileName, n_digits, page_indices, renderer, totalRange)
    zipKernal(fileName)

def PDF2JPG_4(fileName = ''):
    page_indices, n_digits, renderer = transKernal(fileName)

    pageRange = input('請問需要指定頁面嗎？(直接按 Enter 表示全部)：')
    pageRange = pageRange.replace(' ', '').split(',')
    totalRange = []
    for item in pageRange:
        totalRange += getContiRange(item, page_indices)

    saveKernal(fileName, n_digits, page_indices, renderer, totalRange)
    zipKernal(fileName)